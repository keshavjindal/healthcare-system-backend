// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  role          Role
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      UserSession[]
  loginAttempts LoginAttempt[]

  // appointments  Appointment[]
  // healthRecords HealthRecord[]
}

model UserSession {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  ipAddress     String
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime @default(now())
}

model LoginAttempt {
  id            String    @id @default(uuid())
  user          User?      @relation(fields: [userId], references: [id])
  userId        String?
  ipAddress     String
  attemptTime   DateTime  @default(now())
  isSuccess     Boolean
}

// model Appointment {
//   id          String   @id @default(uuid())
//   patientId   String
//   patient     User     @relation(fields: [patientId], references: [id])
//   doctorId    String
//   doctor      User     @relation("DoctorAppointments", fields: [doctorId], references: [id])
//   dateTime    DateTime
//   status      AppointmentStatus
//   type        String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model HealthRecord {
//   id          String   @id @default(uuid())
//   patientId   String
//   patient     User     @relation(fields: [patientId], references: [id])
//   doctorId    String
//   doctor      User     @relation("DoctorHealthRecords", fields: [doctorId], references: [id])
//   diagnosis   String
//   prescription String?
//   notes       String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model Resource {
//   id        String   @id @default(uuid())
//   name      String
//   type      String
//   capacity  Int
//   status    ResourceStatus
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Notification {
//   id        String   @id @default(uuid())
//   userId    String
//   user      User     @relation(fields: [userId], references: [id])
//   type      NotificationType
//   message   String
//   read      Boolean  @default(false)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

// enum AppointmentStatus {
//   SCHEDULED
//   COMPLETED
//   CANCELLED
// }

// enum ResourceStatus {
//   AVAILABLE
//   IN_USE
//   MAINTENANCE
// }

// enum NotificationType {
//   EMAIL
//   SMS
//   IN_APP
// }